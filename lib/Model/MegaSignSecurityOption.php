<?php
/**
 * MegaSignSecurityOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MegaSignSecurityOption Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MegaSignSecurityOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MegaSignSecurityOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_authentication_method' => 'string',
        'external_password' => 'string',
        'internal_authentication_method' => 'string',
        'internal_password' => 'string',
        'open_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_authentication_method' => null,
        'external_password' => null,
        'internal_authentication_method' => null,
        'internal_password' => null,
        'open_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_authentication_method' => 'externalAuthenticationMethod',
        'external_password' => 'externalPassword',
        'internal_authentication_method' => 'internalAuthenticationMethod',
        'internal_password' => 'internalPassword',
        'open_password' => 'openPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_authentication_method' => 'setExternalAuthenticationMethod',
        'external_password' => 'setExternalPassword',
        'internal_authentication_method' => 'setInternalAuthenticationMethod',
        'internal_password' => 'setInternalPassword',
        'open_password' => 'setOpenPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_authentication_method' => 'getExternalAuthenticationMethod',
        'external_password' => 'getExternalPassword',
        'internal_authentication_method' => 'getInternalAuthenticationMethod',
        'internal_password' => 'getInternalPassword',
        'open_password' => 'getOpenPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXTERNAL_AUTHENTICATION_METHOD_NONE = 'NONE';
    const EXTERNAL_AUTHENTICATION_METHOD_WEB_IDENTITY = 'WEB_IDENTITY';
    const EXTERNAL_AUTHENTICATION_METHOD_KBA = 'KBA';
    const EXTERNAL_AUTHENTICATION_METHOD_PASSWORD = 'PASSWORD';
    const INTERNAL_AUTHENTICATION_METHOD_NONE = 'NONE';
    const INTERNAL_AUTHENTICATION_METHOD_WEB_IDENTITY = 'WEB_IDENTITY';
    const INTERNAL_AUTHENTICATION_METHOD_KBA = 'KBA';
    const INTERNAL_AUTHENTICATION_METHOD_PASSWORD = 'PASSWORD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExternalAuthenticationMethodAllowableValues()
    {
        return [
            self::EXTERNAL_AUTHENTICATION_METHOD_NONE,
            self::EXTERNAL_AUTHENTICATION_METHOD_WEB_IDENTITY,
            self::EXTERNAL_AUTHENTICATION_METHOD_KBA,
            self::EXTERNAL_AUTHENTICATION_METHOD_PASSWORD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInternalAuthenticationMethodAllowableValues()
    {
        return [
            self::INTERNAL_AUTHENTICATION_METHOD_NONE,
            self::INTERNAL_AUTHENTICATION_METHOD_WEB_IDENTITY,
            self::INTERNAL_AUTHENTICATION_METHOD_KBA,
            self::INTERNAL_AUTHENTICATION_METHOD_PASSWORD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_authentication_method'] = isset($data['external_authentication_method']) ? $data['external_authentication_method'] : null;
        $this->container['external_password'] = isset($data['external_password']) ? $data['external_password'] : null;
        $this->container['internal_authentication_method'] = isset($data['internal_authentication_method']) ? $data['internal_authentication_method'] : null;
        $this->container['internal_password'] = isset($data['internal_password']) ? $data['internal_password'] : null;
        $this->container['open_password'] = isset($data['open_password']) ? $data['open_password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExternalAuthenticationMethodAllowableValues();
        if (!is_null($this->container['external_authentication_method']) && !in_array($this->container['external_authentication_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'external_authentication_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInternalAuthenticationMethodAllowableValues();
        if (!is_null($this->container['internal_authentication_method']) && !in_array($this->container['internal_authentication_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'internal_authentication_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_authentication_method
     *
     * @return string
     */
    public function getExternalAuthenticationMethod()
    {
        return $this->container['external_authentication_method'];
    }

    /**
     * Sets external_authentication_method
     *
     * @param string $external_authentication_method The authentication method for the participants to have access to view and sign the document.
     *
     * @return $this
     */
    public function setExternalAuthenticationMethod($external_authentication_method)
    {
        $allowedValues = $this->getExternalAuthenticationMethodAllowableValues();
        if (!is_null($external_authentication_method) && !in_array($external_authentication_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'external_authentication_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['external_authentication_method'] = $external_authentication_method;

        return $this;
    }

    /**
     * Gets external_password
     *
     * @return string
     */
    public function getExternalPassword()
    {
        return $this->container['external_password'];
    }

    /**
     * Sets external_password
     *
     * @param string $external_password The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers
     *
     * @return $this
     */
    public function setExternalPassword($external_password)
    {
        $this->container['external_password'] = $external_password;

        return $this;
    }

    /**
     * Gets internal_authentication_method
     *
     * @return string
     */
    public function getInternalAuthenticationMethod()
    {
        return $this->container['internal_authentication_method'];
    }

    /**
     * Sets internal_authentication_method
     *
     * @param string $internal_authentication_method The authentication method for the participants to have access to view and sign the document.
     *
     * @return $this
     */
    public function setInternalAuthenticationMethod($internal_authentication_method)
    {
        $allowedValues = $this->getInternalAuthenticationMethodAllowableValues();
        if (!is_null($internal_authentication_method) && !in_array($internal_authentication_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'internal_authentication_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['internal_authentication_method'] = $internal_authentication_method;

        return $this;
    }

    /**
     * Gets internal_password
     *
     * @return string
     */
    public function getInternalPassword()
    {
        return $this->container['internal_password'];
    }

    /**
     * Sets internal_password
     *
     * @param string $internal_password The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers
     *
     * @return $this
     */
    public function setInternalPassword($internal_password)
    {
        $this->container['internal_password'] = $internal_password;

        return $this;
    }

    /**
     * Gets open_password
     *
     * @return string
     */
    public function getOpenPassword()
    {
        return $this->container['open_password'];
    }

    /**
     * Sets open_password
     *
     * @param string $open_password The secondary password that will be used to secure the PDF document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties
     *
     * @return $this
     */
    public function setOpenPassword($open_password)
    {
        $this->container['open_password'] = $open_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


