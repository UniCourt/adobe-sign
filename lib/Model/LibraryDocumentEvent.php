<?php
/**
 * LibraryDocumentEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LibraryDocumentEvent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LibraryDocumentEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LibraryDocumentEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'initiating_user_name' => 'string',
        'description' => 'string',
        'acting_user_name' => 'string',
        'acting_user_ip_address' => 'string',
        'participant_email' => 'string',
        'type' => 'string',
        'participant_role' => 'string',
        'vault_event_id' => 'string',
        'participant_id' => 'string',
        'version_id' => 'string',
        'acting_user_email' => 'string',
        'device_phone_number' => 'string',
        'initiating_user_email' => 'string',
        'digital_signature_info' => '\Swagger\Client\Model\DigitalSignatureInfo',
        'vault_provider_name' => 'string',
        'comment' => 'string',
        'synchronization_id' => 'string',
        'device_location' => '\Swagger\Client\Model\LibDocEventDeviceLocation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date',
        'initiating_user_name' => null,
        'description' => null,
        'acting_user_name' => null,
        'acting_user_ip_address' => null,
        'participant_email' => null,
        'type' => null,
        'participant_role' => null,
        'vault_event_id' => null,
        'participant_id' => null,
        'version_id' => null,
        'acting_user_email' => null,
        'device_phone_number' => null,
        'initiating_user_email' => null,
        'digital_signature_info' => null,
        'vault_provider_name' => null,
        'comment' => null,
        'synchronization_id' => null,
        'device_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'initiating_user_name' => 'initiatingUserName',
        'description' => 'description',
        'acting_user_name' => 'actingUserName',
        'acting_user_ip_address' => 'actingUserIpAddress',
        'participant_email' => 'participantEmail',
        'type' => 'type',
        'participant_role' => 'participantRole',
        'vault_event_id' => 'vaultEventId',
        'participant_id' => 'participantId',
        'version_id' => 'versionId',
        'acting_user_email' => 'actingUserEmail',
        'device_phone_number' => 'devicePhoneNumber',
        'initiating_user_email' => 'initiatingUserEmail',
        'digital_signature_info' => 'digitalSignatureInfo',
        'vault_provider_name' => 'vaultProviderName',
        'comment' => 'comment',
        'synchronization_id' => 'synchronizationId',
        'device_location' => 'deviceLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'initiating_user_name' => 'setInitiatingUserName',
        'description' => 'setDescription',
        'acting_user_name' => 'setActingUserName',
        'acting_user_ip_address' => 'setActingUserIpAddress',
        'participant_email' => 'setParticipantEmail',
        'type' => 'setType',
        'participant_role' => 'setParticipantRole',
        'vault_event_id' => 'setVaultEventId',
        'participant_id' => 'setParticipantId',
        'version_id' => 'setVersionId',
        'acting_user_email' => 'setActingUserEmail',
        'device_phone_number' => 'setDevicePhoneNumber',
        'initiating_user_email' => 'setInitiatingUserEmail',
        'digital_signature_info' => 'setDigitalSignatureInfo',
        'vault_provider_name' => 'setVaultProviderName',
        'comment' => 'setComment',
        'synchronization_id' => 'setSynchronizationId',
        'device_location' => 'setDeviceLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'initiating_user_name' => 'getInitiatingUserName',
        'description' => 'getDescription',
        'acting_user_name' => 'getActingUserName',
        'acting_user_ip_address' => 'getActingUserIpAddress',
        'participant_email' => 'getParticipantEmail',
        'type' => 'getType',
        'participant_role' => 'getParticipantRole',
        'vault_event_id' => 'getVaultEventId',
        'participant_id' => 'getParticipantId',
        'version_id' => 'getVersionId',
        'acting_user_email' => 'getActingUserEmail',
        'device_phone_number' => 'getDevicePhoneNumber',
        'initiating_user_email' => 'getInitiatingUserEmail',
        'digital_signature_info' => 'getDigitalSignatureInfo',
        'vault_provider_name' => 'getVaultProviderName',
        'comment' => 'getComment',
        'synchronization_id' => 'getSynchronizationId',
        'device_location' => 'getDeviceLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_AUTO_CANCELLED_CONVERSION_PROBLEM = 'AUTO_CANCELLED_CONVERSION_PROBLEM';
    const TYPE_CREATED = 'CREATED';
    const TYPE_MODIFIED = 'MODIFIED';
    const TYPE_DOCUMENTS_DELETED = 'DOCUMENTS_DELETED';
    const PARTICIPANT_ROLE_SIGNER = 'SIGNER';
    const PARTICIPANT_ROLE_DELEGATE_TO_SIGNER = 'DELEGATE_TO_SIGNER';
    const PARTICIPANT_ROLE_APPROVER = 'APPROVER';
    const PARTICIPANT_ROLE_DELEGATE_TO_APPROVER = 'DELEGATE_TO_APPROVER';
    const PARTICIPANT_ROLE_ACCEPTOR = 'ACCEPTOR';
    const PARTICIPANT_ROLE_DELEGATE_TO_ACCEPTOR = 'DELEGATE_TO_ACCEPTOR';
    const PARTICIPANT_ROLE_FORM_FILLER = 'FORM_FILLER';
    const PARTICIPANT_ROLE_DELEGATE_TO_FORM_FILLER = 'DELEGATE_TO_FORM_FILLER';
    const PARTICIPANT_ROLE_CERTIFIED_RECIPIENT = 'CERTIFIED_RECIPIENT';
    const PARTICIPANT_ROLE_DELEGATE_TO_CERTIFIED_RECIPIENT = 'DELEGATE_TO_CERTIFIED_RECIPIENT';
    const PARTICIPANT_ROLE_SHARE = 'SHARE';
    const PARTICIPANT_ROLE_SENDER = 'SENDER';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AUTO_CANCELLED_CONVERSION_PROBLEM,
            self::TYPE_CREATED,
            self::TYPE_MODIFIED,
            self::TYPE_DOCUMENTS_DELETED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParticipantRoleAllowableValues()
    {
        return [
            self::PARTICIPANT_ROLE_SIGNER,
            self::PARTICIPANT_ROLE_DELEGATE_TO_SIGNER,
            self::PARTICIPANT_ROLE_APPROVER,
            self::PARTICIPANT_ROLE_DELEGATE_TO_APPROVER,
            self::PARTICIPANT_ROLE_ACCEPTOR,
            self::PARTICIPANT_ROLE_DELEGATE_TO_ACCEPTOR,
            self::PARTICIPANT_ROLE_FORM_FILLER,
            self::PARTICIPANT_ROLE_DELEGATE_TO_FORM_FILLER,
            self::PARTICIPANT_ROLE_CERTIFIED_RECIPIENT,
            self::PARTICIPANT_ROLE_DELEGATE_TO_CERTIFIED_RECIPIENT,
            self::PARTICIPANT_ROLE_SHARE,
            self::PARTICIPANT_ROLE_SENDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['initiating_user_name'] = isset($data['initiating_user_name']) ? $data['initiating_user_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['acting_user_name'] = isset($data['acting_user_name']) ? $data['acting_user_name'] : null;
        $this->container['acting_user_ip_address'] = isset($data['acting_user_ip_address']) ? $data['acting_user_ip_address'] : null;
        $this->container['participant_email'] = isset($data['participant_email']) ? $data['participant_email'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['participant_role'] = isset($data['participant_role']) ? $data['participant_role'] : null;
        $this->container['vault_event_id'] = isset($data['vault_event_id']) ? $data['vault_event_id'] : null;
        $this->container['participant_id'] = isset($data['participant_id']) ? $data['participant_id'] : null;
        $this->container['version_id'] = isset($data['version_id']) ? $data['version_id'] : null;
        $this->container['acting_user_email'] = isset($data['acting_user_email']) ? $data['acting_user_email'] : null;
        $this->container['device_phone_number'] = isset($data['device_phone_number']) ? $data['device_phone_number'] : null;
        $this->container['initiating_user_email'] = isset($data['initiating_user_email']) ? $data['initiating_user_email'] : null;
        $this->container['digital_signature_info'] = isset($data['digital_signature_info']) ? $data['digital_signature_info'] : null;
        $this->container['vault_provider_name'] = isset($data['vault_provider_name']) ? $data['vault_provider_name'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['synchronization_id'] = isset($data['synchronization_id']) ? $data['synchronization_id'] : null;
        $this->container['device_location'] = isset($data['device_location']) ? $data['device_location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getParticipantRoleAllowableValues();
        if (!is_null($this->container['participant_role']) && !in_array($this->container['participant_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'participant_role', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets initiating_user_name
     *
     * @return string
     */
    public function getInitiatingUserName()
    {
        return $this->container['initiating_user_name'];
    }

    /**
     * Sets initiating_user_name
     *
     * @param string $initiating_user_name Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
     *
     * @return $this
     */
    public function setInitiatingUserName($initiating_user_name)
    {
        $this->container['initiating_user_name'] = $initiating_user_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the audit event
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets acting_user_name
     *
     * @return string
     */
    public function getActingUserName()
    {
        return $this->container['acting_user_name'];
    }

    /**
     * Sets acting_user_name
     *
     * @param string $acting_user_name The name of the acting user
     *
     * @return $this
     */
    public function setActingUserName($acting_user_name)
    {
        $this->container['acting_user_name'] = $acting_user_name;

        return $this;
    }

    /**
     * Gets acting_user_ip_address
     *
     * @return string
     */
    public function getActingUserIpAddress()
    {
        return $this->container['acting_user_ip_address'];
    }

    /**
     * Sets acting_user_ip_address
     *
     * @param string $acting_user_ip_address The IP address of the user that created the event
     *
     * @return $this
     */
    public function setActingUserIpAddress($acting_user_ip_address)
    {
        $this->container['acting_user_ip_address'] = $acting_user_ip_address;

        return $this;
    }

    /**
     * Gets participant_email
     *
     * @return string
     */
    public function getParticipantEmail()
    {
        return $this->container['participant_email'];
    }

    /**
     * Sets participant_email
     *
     * @param string $participant_email Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
     *
     * @return $this
     */
    public function setParticipantEmail($participant_email)
    {
        $this->container['participant_email'] = $participant_email;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of library document event
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets participant_role
     *
     * @return string
     */
    public function getParticipantRole()
    {
        return $this->container['participant_role'];
    }

    /**
     * Sets participant_role
     *
     * @param string $participant_role Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).
     *
     * @return $this
     */
    public function setParticipantRole($participant_role)
    {
        $allowedValues = $this->getParticipantRoleAllowableValues();
        if (!is_null($participant_role) && !in_array($participant_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'participant_role', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['participant_role'] = $participant_role;

        return $this;
    }

    /**
     * Gets vault_event_id
     *
     * @return string
     */
    public function getVaultEventId()
    {
        return $this->container['vault_event_id'];
    }

    /**
     * Sets vault_event_id
     *
     * @param string $vault_event_id The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
     *
     * @return $this
     */
    public function setVaultEventId($vault_event_id)
    {
        $this->container['vault_event_id'] = $vault_event_id;

        return $this;
    }

    /**
     * Gets participant_id
     *
     * @return string
     */
    public function getParticipantId()
    {
        return $this->container['participant_id'];
    }

    /**
     * Sets participant_id
     *
     * @param string $participant_id The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
     *
     * @return $this
     */
    public function setParticipantId($participant_id)
    {
        $this->container['participant_id'] = $participant_id;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return string
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param string $version_id An ID which uniquely identifies the version of the document associated with this audit event
     *
     * @return $this
     */
    public function setVersionId($version_id)
    {
        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets acting_user_email
     *
     * @return string
     */
    public function getActingUserEmail()
    {
        return $this->container['acting_user_email'];
    }

    /**
     * Sets acting_user_email
     *
     * @param string $acting_user_email Email address of the user that created the event
     *
     * @return $this
     */
    public function setActingUserEmail($acting_user_email)
    {
        $this->container['acting_user_email'] = $acting_user_email;

        return $this;
    }

    /**
     * Gets device_phone_number
     *
     * @return string
     */
    public function getDevicePhoneNumber()
    {
        return $this->container['device_phone_number'];
    }

    /**
     * Sets device_phone_number
     *
     * @param string $device_phone_number Phone number from the device used when the participation is completed on a mobile phone
     *
     * @return $this
     */
    public function setDevicePhoneNumber($device_phone_number)
    {
        $this->container['device_phone_number'] = $device_phone_number;

        return $this;
    }

    /**
     * Gets initiating_user_email
     *
     * @return string
     */
    public function getInitiatingUserEmail()
    {
        return $this->container['initiating_user_email'];
    }

    /**
     * Sets initiating_user_email
     *
     * @param string $initiating_user_email Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
     *
     * @return $this
     */
    public function setInitiatingUserEmail($initiating_user_email)
    {
        $this->container['initiating_user_email'] = $initiating_user_email;

        return $this;
    }

    /**
     * Gets digital_signature_info
     *
     * @return \Swagger\Client\Model\DigitalSignatureInfo
     */
    public function getDigitalSignatureInfo()
    {
        return $this->container['digital_signature_info'];
    }

    /**
     * Sets digital_signature_info
     *
     * @param \Swagger\Client\Model\DigitalSignatureInfo $digital_signature_info This is present for ESIGNED events when the participation is signed digitally
     *
     * @return $this
     */
    public function setDigitalSignatureInfo($digital_signature_info)
    {
        $this->container['digital_signature_info'] = $digital_signature_info;

        return $this;
    }

    /**
     * Gets vault_provider_name
     *
     * @return string
     */
    public function getVaultProviderName()
    {
        return $this->container['vault_provider_name'];
    }

    /**
     * Sets vault_provider_name
     *
     * @param string $vault_provider_name Name of the vault provider for the vault event (if vaulted, otherwise null)
     *
     * @return $this
     */
    public function setVaultProviderName($vault_provider_name)
    {
        $this->container['vault_provider_name'] = $vault_provider_name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets synchronization_id
     *
     * @return string
     */
    public function getSynchronizationId()
    {
        return $this->container['synchronization_id'];
    }

    /**
     * Sets synchronization_id
     *
     * @param string $synchronization_id A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
     *
     * @return $this
     */
    public function setSynchronizationId($synchronization_id)
    {
        $this->container['synchronization_id'] = $synchronization_id;

        return $this;
    }

    /**
     * Gets device_location
     *
     * @return \Swagger\Client\Model\LibDocEventDeviceLocation
     */
    public function getDeviceLocation()
    {
        return $this->container['device_location'];
    }

    /**
     * Sets device_location
     *
     * @param \Swagger\Client\Model\LibDocEventDeviceLocation $device_location Location of the device that generated the event (This value may be null due to limited privileges)
     *
     * @return $this
     */
    public function setDeviceLocation($device_location)
    {
        $this->container['device_location'] = $device_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


