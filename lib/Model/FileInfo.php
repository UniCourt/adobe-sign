<?php
/**
 * FileInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FileInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FileInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FileInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transient_document_id' => 'string',
        'document' => '\Swagger\Client\Model\Document',
        'library_document_id' => 'string',
        'label' => 'string',
        'url_file_info' => '\Swagger\Client\Model\URLFileInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transient_document_id' => null,
        'document' => null,
        'library_document_id' => null,
        'label' => null,
        'url_file_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transient_document_id' => 'transientDocumentId',
        'document' => 'document',
        'library_document_id' => 'libraryDocumentId',
        'label' => 'label',
        'url_file_info' => 'urlFileInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transient_document_id' => 'setTransientDocumentId',
        'document' => 'setDocument',
        'library_document_id' => 'setLibraryDocumentId',
        'label' => 'setLabel',
        'url_file_info' => 'setUrlFileInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transient_document_id' => 'getTransientDocumentId',
        'document' => 'getDocument',
        'library_document_id' => 'getLibraryDocumentId',
        'label' => 'getLabel',
        'url_file_info' => 'getUrlFileInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transient_document_id'] = isset($data['transient_document_id']) ? $data['transient_document_id'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['library_document_id'] = isset($data['library_document_id']) ? $data['library_document_id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['url_file_info'] = isset($data['url_file_info']) ? $data['url_file_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transient_document_id
     *
     * @return string
     */
    public function getTransientDocumentId()
    {
        return $this->container['transient_document_id'];
    }

    /**
     * Sets transient_document_id
     *
     * @param string $transient_document_id ID for a transient document that will be added to the agreement
     *
     * @return $this
     */
    public function setTransientDocumentId($transient_document_id)
    {
        $this->container['transient_document_id'] = $transient_document_id;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Swagger\Client\Model\Document
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \Swagger\Client\Model\Document $document A document that is associated with the agreement. This field cannot be provided in POST call. In case of GET call, this is the only field returned in the response
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets library_document_id
     *
     * @return string
     */
    public function getLibraryDocumentId()
    {
        return $this->container['library_document_id'];
    }

    /**
     * Sets library_document_id
     *
     * @param string $library_document_id ID for an existing Library document that will be added to the agreement
     *
     * @return $this
     */
    public function setLibraryDocumentId($library_document_id)
    {
        $this->container['library_document_id'] = $library_document_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The unique label value of a file info element. In case of custom workflow this will map a file to corresponding file element in workflow definition. This must be specified in case of custom workflow agreement creation request
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets url_file_info
     *
     * @return \Swagger\Client\Model\URLFileInfo
     */
    public function getUrlFileInfo()
    {
        return $this->container['url_file_info'];
    }

    /**
     * Sets url_file_info
     *
     * @param \Swagger\Client\Model\URLFileInfo $url_file_info URL for an external document to add to the agreement
     *
     * @return $this
     */
    public function setUrlFileInfo($url_file_info)
    {
        $this->container['url_file_info'] = $url_file_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


