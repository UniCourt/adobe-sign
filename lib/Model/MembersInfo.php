<?php
/**
 * MembersInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\ESign\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Adobe\ESign\\Model;

use \ArrayAccess;
use \Adobe\ESign\\ObjectSerializer;

/**
 * MembersInfo Class Doc Comment
 *
 * @category Class
 * @package  Adobe\ESign\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembersInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MembersInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'participant_sets' => '\Adobe\ESign\\Model\DetailedParticipantSetInfo[]',
        'ccs_info' => '\Adobe\ESign\\Model\CCParticipantInfo[]',
        'next_participant_sets' => '\Adobe\ESign\\Model\DetailedParticipantSetInfo[]',
        'sender_info' => '\Adobe\ESign\\Model\SenderInfo',
        'shares_info' => '\Adobe\ESign\\Model\ShareParticipantInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'participant_sets' => null,
        'ccs_info' => null,
        'next_participant_sets' => null,
        'sender_info' => null,
        'shares_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'participant_sets' => 'participantSets',
        'ccs_info' => 'ccsInfo',
        'next_participant_sets' => 'nextParticipantSets',
        'sender_info' => 'senderInfo',
        'shares_info' => 'sharesInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'participant_sets' => 'setParticipantSets',
        'ccs_info' => 'setCcsInfo',
        'next_participant_sets' => 'setNextParticipantSets',
        'sender_info' => 'setSenderInfo',
        'shares_info' => 'setSharesInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'participant_sets' => 'getParticipantSets',
        'ccs_info' => 'getCcsInfo',
        'next_participant_sets' => 'getNextParticipantSets',
        'sender_info' => 'getSenderInfo',
        'shares_info' => 'getSharesInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['participant_sets'] = isset($data['participant_sets']) ? $data['participant_sets'] : null;
        $this->container['ccs_info'] = isset($data['ccs_info']) ? $data['ccs_info'] : null;
        $this->container['next_participant_sets'] = isset($data['next_participant_sets']) ? $data['next_participant_sets'] : null;
        $this->container['sender_info'] = isset($data['sender_info']) ? $data['sender_info'] : null;
        $this->container['shares_info'] = isset($data['shares_info']) ? $data['shares_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets participant_sets
     *
     * @return \Adobe\ESign\\Model\DetailedParticipantSetInfo[]
     */
    public function getParticipantSets()
    {
        return $this->container['participant_sets'];
    }

    /**
     * Sets participant_sets
     *
     * @param \Adobe\ESign\\Model\DetailedParticipantSetInfo[] $participant_sets Information about the participant Sets.
     *
     * @return $this
     */
    public function setParticipantSets($participant_sets)
    {
        $this->container['participant_sets'] = $participant_sets;

        return $this;
    }

    /**
     * Gets ccs_info
     *
     * @return \Adobe\ESign\\Model\CCParticipantInfo[]
     */
    public function getCcsInfo()
    {
        return $this->container['ccs_info'];
    }

    /**
     * Sets ccs_info
     *
     * @param \Adobe\ESign\\Model\CCParticipantInfo[] $ccs_info Information of CC participants of the agreement.
     *
     * @return $this
     */
    public function setCcsInfo($ccs_info)
    {
        $this->container['ccs_info'] = $ccs_info;

        return $this;
    }

    /**
     * Gets next_participant_sets
     *
     * @return \Adobe\ESign\\Model\DetailedParticipantSetInfo[]
     */
    public function getNextParticipantSets()
    {
        return $this->container['next_participant_sets'];
    }

    /**
     * Sets next_participant_sets
     *
     * @param \Adobe\ESign\\Model\DetailedParticipantSetInfo[] $next_participant_sets Information of next participant sets.
     *
     * @return $this
     */
    public function setNextParticipantSets($next_participant_sets)
    {
        $this->container['next_participant_sets'] = $next_participant_sets;

        return $this;
    }

    /**
     * Gets sender_info
     *
     * @return \Adobe\ESign\\Model\SenderInfo
     */
    public function getSenderInfo()
    {
        return $this->container['sender_info'];
    }

    /**
     * Sets sender_info
     *
     * @param \Adobe\ESign\\Model\SenderInfo $sender_info Information of the sender of the agreement.
     *
     * @return $this
     */
    public function setSenderInfo($sender_info)
    {
        $this->container['sender_info'] = $sender_info;

        return $this;
    }

    /**
     * Gets shares_info
     *
     * @return \Adobe\ESign\\Model\ShareParticipantInfo[]
     */
    public function getSharesInfo()
    {
        return $this->container['shares_info'];
    }

    /**
     * Sets shares_info
     *
     * @param \Adobe\ESign\\Model\ShareParticipantInfo[] $shares_info Information of the participants with whom the agreement has been shared.
     *
     * @return $this
     */
    public function setSharesInfo($shares_info)
    {
        $this->container['shares_info'] = $shares_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


