<?php
/**
 * WidgetAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\ESign\Widgets
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Adobe\ESign\Widgets\Model;

use \ArrayAccess;
use \Adobe\ESign\Widgets\ObjectSerializer;

/**
 * WidgetAgreement Class Doc Comment
 *
 * @category Class
 * @package  Adobe\ESign\Widgets
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WidgetAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WidgetAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hidden' => 'bool',
        'display_date' => '\DateTime',
        'esign' => 'bool',
        'name' => 'string',
        'display_participant_set_infos' => '\Adobe\ESign\Widgets\Model\DisplayWidgetParticipantSetInfo[]',
        'latest_version_id' => 'string',
        'id' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hidden' => null,
        'display_date' => 'date',
        'esign' => null,
        'name' => null,
        'display_participant_set_infos' => null,
        'latest_version_id' => null,
        'id' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hidden' => 'hidden',
        'display_date' => 'displayDate',
        'esign' => 'esign',
        'name' => 'name',
        'display_participant_set_infos' => 'displayParticipantSetInfos',
        'latest_version_id' => 'latestVersionId',
        'id' => 'id',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hidden' => 'setHidden',
        'display_date' => 'setDisplayDate',
        'esign' => 'setEsign',
        'name' => 'setName',
        'display_participant_set_infos' => 'setDisplayParticipantSetInfos',
        'latest_version_id' => 'setLatestVersionId',
        'id' => 'setId',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hidden' => 'getHidden',
        'display_date' => 'getDisplayDate',
        'esign' => 'getEsign',
        'name' => 'getName',
        'display_participant_set_infos' => 'getDisplayParticipantSetInfos',
        'latest_version_id' => 'getLatestVersionId',
        'id' => 'getId',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_WAITING_FOR_MY_SIGNATURE = 'WAITING_FOR_MY_SIGNATURE';
    const STATUS_WAITING_FOR_MY_APPROVAL = 'WAITING_FOR_MY_APPROVAL';
    const STATUS_WAITING_FOR_MY_DELEGATION = 'WAITING_FOR_MY_DELEGATION';
    const STATUS_WAITING_FOR_MY_ACKNOWLEDGEMENT = 'WAITING_FOR_MY_ACKNOWLEDGEMENT';
    const STATUS_WAITING_FOR_MY_ACCEPTANCE = 'WAITING_FOR_MY_ACCEPTANCE';
    const STATUS_WAITING_FOR_MY_FORM_FILLING = 'WAITING_FOR_MY_FORM_FILLING';
    const STATUS_OUT_FOR_SIGNATURE = 'OUT_FOR_SIGNATURE';
    const STATUS_OUT_FOR_APPROVAL = 'OUT_FOR_APPROVAL';
    const STATUS_OUT_FOR_DELIVERY = 'OUT_FOR_DELIVERY';
    const STATUS_OUT_FOR_ACCEPTANCE = 'OUT_FOR_ACCEPTANCE';
    const STATUS_OUT_FOR_FORM_FILLING = 'OUT_FOR_FORM_FILLING';
    const STATUS_SIGNED = 'SIGNED';
    const STATUS_APPROVED = 'APPROVED';
    const STATUS_FORM_FILLED = 'FORM_FILLED';
    const STATUS_DELIVERED = 'DELIVERED';
    const STATUS_ACCEPTED = 'ACCEPTED';
    const STATUS_ARCHIVED = 'ARCHIVED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_EXPIRED = 'EXPIRED';
    const STATUS_WAITING_FOR_PREFILL = 'WAITING_FOR_PREFILL';
    const STATUS_DOCUMENTS_NOT_YET_PROCESSED = 'DOCUMENTS_NOT_YET_PROCESSED';
    const STATUS_WAITING_FOR_MY_VERIFICATION = 'WAITING_FOR_MY_VERIFICATION';
    const STATUS_WAITING_FOR_VERIFICATION = 'WAITING_FOR_VERIFICATION';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_WAITING_FOR_MY_SIGNATURE,
            self::STATUS_WAITING_FOR_MY_APPROVAL,
            self::STATUS_WAITING_FOR_MY_DELEGATION,
            self::STATUS_WAITING_FOR_MY_ACKNOWLEDGEMENT,
            self::STATUS_WAITING_FOR_MY_ACCEPTANCE,
            self::STATUS_WAITING_FOR_MY_FORM_FILLING,
            self::STATUS_OUT_FOR_SIGNATURE,
            self::STATUS_OUT_FOR_APPROVAL,
            self::STATUS_OUT_FOR_DELIVERY,
            self::STATUS_OUT_FOR_ACCEPTANCE,
            self::STATUS_OUT_FOR_FORM_FILLING,
            self::STATUS_SIGNED,
            self::STATUS_APPROVED,
            self::STATUS_FORM_FILLED,
            self::STATUS_DELIVERED,
            self::STATUS_ACCEPTED,
            self::STATUS_ARCHIVED,
            self::STATUS_CANCELLED,
            self::STATUS_EXPIRED,
            self::STATUS_WAITING_FOR_PREFILL,
            self::STATUS_DOCUMENTS_NOT_YET_PROCESSED,
            self::STATUS_WAITING_FOR_MY_VERIFICATION,
            self::STATUS_WAITING_FOR_VERIFICATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['display_date'] = isset($data['display_date']) ? $data['display_date'] : null;
        $this->container['esign'] = isset($data['esign']) ? $data['esign'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['display_participant_set_infos'] = isset($data['display_participant_set_infos']) ? $data['display_participant_set_infos'] : null;
        $this->container['latest_version_id'] = isset($data['latest_version_id']) ? $data['latest_version_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden True if agreement is hidden for the user
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets display_date
     *
     * @return \DateTime
     */
    public function getDisplayDate()
    {
        return $this->container['display_date'];
    }

    /**
     * Sets display_date
     *
     * @param \DateTime $display_date The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
     *
     * @return $this
     */
    public function setDisplayDate($display_date)
    {
        $this->container['display_date'] = $display_date;

        return $this;
    }

    /**
     * Gets esign
     *
     * @return bool
     */
    public function getEsign()
    {
        return $this->container['esign'];
    }

    /**
     * Sets esign
     *
     * @param bool $esign True if this is an e-sign document
     *
     * @return $this
     */
    public function setEsign($esign)
    {
        $this->container['esign'] = $esign;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the Agreement
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_participant_set_infos
     *
     * @return \Adobe\ESign\Widgets\Model\DisplayWidgetParticipantSetInfo[]
     */
    public function getDisplayParticipantSetInfos()
    {
        return $this->container['display_participant_set_infos'];
    }

    /**
     * Sets display_participant_set_infos
     *
     * @param \Adobe\ESign\Widgets\Model\DisplayWidgetParticipantSetInfo[] $display_participant_set_infos The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
     *
     * @return $this
     */
    public function setDisplayParticipantSetInfos($display_participant_set_infos)
    {
        $this->container['display_participant_set_infos'] = $display_participant_set_infos;

        return $this;
    }

    /**
     * Gets latest_version_id
     *
     * @return string
     */
    public function getLatestVersionId()
    {
        return $this->container['latest_version_id'];
    }

    /**
     * Sets latest_version_id
     *
     * @param string $latest_version_id A version ID which uniquely identifies the current version of the agreement
     *
     * @return $this
     */
    public function setLatestVersionId($latest_version_id)
    {
        $this->container['latest_version_id'] = $latest_version_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of the agreement.If provided in POST, it will simply be ignored
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of the document from the perspective of the originator
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


