<?php
/**
 * WidgetMembersInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\ESign\Widgets
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Adobe\ESign\Widgets\Model;

use \ArrayAccess;
use \Adobe\ESign\Widgets\ObjectSerializer;

/**
 * WidgetMembersInfo Class Doc Comment
 *
 * @category Class
 * @package  Adobe\ESign\Widgets
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WidgetMembersInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WidgetMembersInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ccs_info' => '\Adobe\ESign\Widgets\Model\CCParticipantInfo[]',
        'additional_participant_sets' => '\Adobe\ESign\Widgets\Model\DetailedWidgetParticipantSetInfo[]',
        'widget_participant_set' => '\Adobe\ESign\Widgets\Model\DetailedWidgetParticipantSetInfo',
        'shares_info' => '\Adobe\ESign\Widgets\Model\ShareParticipantInfo[]',
        'creator_info' => '\Adobe\ESign\Widgets\Model\SenderInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ccs_info' => null,
        'additional_participant_sets' => null,
        'widget_participant_set' => null,
        'shares_info' => null,
        'creator_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ccs_info' => 'ccsInfo',
        'additional_participant_sets' => 'additionalParticipantSets',
        'widget_participant_set' => 'widgetParticipantSet',
        'shares_info' => 'sharesInfo',
        'creator_info' => 'creatorInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ccs_info' => 'setCcsInfo',
        'additional_participant_sets' => 'setAdditionalParticipantSets',
        'widget_participant_set' => 'setWidgetParticipantSet',
        'shares_info' => 'setSharesInfo',
        'creator_info' => 'setCreatorInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ccs_info' => 'getCcsInfo',
        'additional_participant_sets' => 'getAdditionalParticipantSets',
        'widget_participant_set' => 'getWidgetParticipantSet',
        'shares_info' => 'getSharesInfo',
        'creator_info' => 'getCreatorInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ccs_info'] = isset($data['ccs_info']) ? $data['ccs_info'] : null;
        $this->container['additional_participant_sets'] = isset($data['additional_participant_sets']) ? $data['additional_participant_sets'] : null;
        $this->container['widget_participant_set'] = isset($data['widget_participant_set']) ? $data['widget_participant_set'] : null;
        $this->container['shares_info'] = isset($data['shares_info']) ? $data['shares_info'] : null;
        $this->container['creator_info'] = isset($data['creator_info']) ? $data['creator_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ccs_info
     *
     * @return \Adobe\ESign\Widgets\Model\CCParticipantInfo[]
     */
    public function getCcsInfo()
    {
        return $this->container['ccs_info'];
    }

    /**
     * Sets ccs_info
     *
     * @param \Adobe\ESign\Widgets\Model\CCParticipantInfo[] $ccs_info Information of CC participants of the widget.
     *
     * @return $this
     */
    public function setCcsInfo($ccs_info)
    {
        $this->container['ccs_info'] = $ccs_info;

        return $this;
    }

    /**
     * Gets additional_participant_sets
     *
     * @return \Adobe\ESign\Widgets\Model\DetailedWidgetParticipantSetInfo[]
     */
    public function getAdditionalParticipantSets()
    {
        return $this->container['additional_participant_sets'];
    }

    /**
     * Sets additional_participant_sets
     *
     * @param \Adobe\ESign\Widgets\Model\DetailedWidgetParticipantSetInfo[] $additional_participant_sets Information about the widget additional participant Sets
     *
     * @return $this
     */
    public function setAdditionalParticipantSets($additional_participant_sets)
    {
        $this->container['additional_participant_sets'] = $additional_participant_sets;

        return $this;
    }

    /**
     * Gets widget_participant_set
     *
     * @return \Adobe\ESign\Widgets\Model\DetailedWidgetParticipantSetInfo
     */
    public function getWidgetParticipantSet()
    {
        return $this->container['widget_participant_set'];
    }

    /**
     * Sets widget_participant_set
     *
     * @param \Adobe\ESign\Widgets\Model\DetailedWidgetParticipantSetInfo $widget_participant_set Information about the widget participant Set
     *
     * @return $this
     */
    public function setWidgetParticipantSet($widget_participant_set)
    {
        $this->container['widget_participant_set'] = $widget_participant_set;

        return $this;
    }

    /**
     * Gets shares_info
     *
     * @return \Adobe\ESign\Widgets\Model\ShareParticipantInfo[]
     */
    public function getSharesInfo()
    {
        return $this->container['shares_info'];
    }

    /**
     * Sets shares_info
     *
     * @param \Adobe\ESign\Widgets\Model\ShareParticipantInfo[] $shares_info Information of the participants with whom the widget has been shared.
     *
     * @return $this
     */
    public function setSharesInfo($shares_info)
    {
        $this->container['shares_info'] = $shares_info;

        return $this;
    }

    /**
     * Gets creator_info
     *
     * @return \Adobe\ESign\Widgets\Model\SenderInfo
     */
    public function getCreatorInfo()
    {
        return $this->container['creator_info'];
    }

    /**
     * Sets creator_info
     *
     * @param \Adobe\ESign\Widgets\Model\SenderInfo $creator_info Information of the creator of the widget.
     *
     * @return $this
     */
    public function setCreatorInfo($creator_info)
    {
        $this->container['creator_info'] = $creator_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


