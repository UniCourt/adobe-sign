<?php
/**
 * LibraryDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\ESign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Adobe\ESign\Model;

use \ArrayAccess;
use \Adobe\ESign\ObjectSerializer;

/**
 * LibraryDocument Class Doc Comment
 *
 * @category Class
 * @package  Adobe\ESign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LibraryDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LibraryDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'templateTypes' => 'string[]',
        'hidden' => 'bool',
        'creatorEmail' => 'string',
        'sharingMode' => 'string',
        'modifiedDate' => '\DateTime',
        'name' => 'string',
        'id' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'templateTypes' => null,
        'hidden' => null,
        'creatorEmail' => null,
        'sharingMode' => null,
        'modifiedDate' => 'date',
        'name' => null,
        'id' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'templateTypes' => 'templateTypes',
        'hidden' => 'hidden',
        'creatorEmail' => 'creatorEmail',
        'sharingMode' => 'sharingMode',
        'modifiedDate' => 'modifiedDate',
        'name' => 'name',
        'id' => 'id',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'templateTypes' => 'setTemplateTypes',
        'hidden' => 'setHidden',
        'creatorEmail' => 'setCreatorEmail',
        'sharingMode' => 'setSharingMode',
        'modifiedDate' => 'setModifiedDate',
        'name' => 'setName',
        'id' => 'setId',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'templateTypes' => 'getTemplateTypes',
        'hidden' => 'getHidden',
        'creatorEmail' => 'getCreatorEmail',
        'sharingMode' => 'getSharingMode',
        'modifiedDate' => 'getModifiedDate',
        'name' => 'getName',
        'id' => 'getId',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TEMPLATE_TYPES_DOCUMENT = 'DOCUMENT';
    const TEMPLATE_TYPES_FORM_FIELD_LAYER = 'FORM_FIELD_LAYER';
    const SHARING_MODE_USER = 'USER';
    const SHARING_MODE_GROUP = 'GROUP';
    const SHARING_MODE_ACCOUNT = 'ACCOUNT';
    const SHARING_MODE__GLOBAL = 'GLOBAL';
    const STATUS_AUTHORING = 'AUTHORING';
    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_REMOVED = 'REMOVED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypesAllowableValues()
    {
        return [
            self::TEMPLATE_TYPES_DOCUMENT,
            self::TEMPLATE_TYPES_FORM_FIELD_LAYER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSharingModeAllowableValues()
    {
        return [
            self::SHARING_MODE_USER,
            self::SHARING_MODE_GROUP,
            self::SHARING_MODE_ACCOUNT,
            self::SHARING_MODE__GLOBAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AUTHORING,
            self::STATUS_ACTIVE,
            self::STATUS_REMOVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['templateTypes'] = isset($data['templateTypes']) ? $data['templateTypes'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['creatorEmail'] = isset($data['creatorEmail']) ? $data['creatorEmail'] : null;
        $this->container['sharingMode'] = isset($data['sharingMode']) ? $data['sharingMode'] : null;
        $this->container['modifiedDate'] = isset($data['modifiedDate']) ? $data['modifiedDate'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSharingModeAllowableValues();
        if (!is_null($this->container['sharingMode']) && !in_array($this->container['sharingMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sharingMode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets templateTypes
     *
     * @return string[]
     */
    public function getTemplateTypes()
    {
        return $this->container['templateTypes'];
    }

    /**
     * Sets templateTypes
     *
     * @param string[] $templateTypes A list of one or more library template types
     *
     * @return $this
     */
    public function setTemplateTypes($templateTypes)
    {
        $allowedValues = $this->getTemplateTypesAllowableValues();
        if (!is_null($templateTypes) && array_diff($templateTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'templateTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['templateTypes'] = $templateTypes;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden True if Library Document is hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets creatorEmail
     *
     * @return string
     */
    public function getCreatorEmail()
    {
        return $this->container['creatorEmail'];
    }

    /**
     * Sets creatorEmail
     *
     * @param string $creatorEmail Email address of the library document creator. It will be ignored in POST/PUT requests
     *
     * @return $this
     */
    public function setCreatorEmail($creatorEmail)
    {
        $this->container['creatorEmail'] = $creatorEmail;

        return $this;
    }

    /**
     * Gets sharingMode
     *
     * @return string
     */
    public function getSharingMode()
    {
        return $this->container['sharingMode'];
    }

    /**
     * Sets sharingMode
     *
     * @param string $sharingMode Specifies who should have access to this library document. GLOBAL sharing mode is not applicable in POST/PUT requests
     *
     * @return $this
     */
    public function setSharingMode($sharingMode)
    {
        $allowedValues = $this->getSharingModeAllowableValues();
        if (!is_null($sharingMode) && !in_array($sharingMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sharingMode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sharingMode'] = $sharingMode;

        return $this;
    }

    /**
     * Gets modifiedDate
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modifiedDate'];
    }

    /**
     * Sets modifiedDate
     *
     * @param \DateTime $modifiedDate The date on which the library document was last modified. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
     *
     * @return $this
     */
    public function setModifiedDate($modifiedDate)
    {
        $this->container['modifiedDate'] = $modifiedDate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the library document
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier that is used to refer to the library template
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the library document
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


