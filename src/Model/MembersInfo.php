<?php
/**
 * MembersInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\ESign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Adobe\ESign\Model;

use \ArrayAccess;
use \Adobe\ESign\ObjectSerializer;

/**
 * MembersInfo Class Doc Comment
 *
 * @category Class
 * @package  Adobe\ESign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembersInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MembersInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'participantSets' => '\Adobe\ESign\Model\DetailedParticipantSetInfo[]',
        'ccsInfo' => '\Adobe\ESign\Model\CCParticipantInfo[]',
        'nextParticipantSets' => '\Adobe\ESign\Model\DetailedParticipantSetInfo[]',
        'senderInfo' => '\Adobe\ESign\Model\SenderInfo',
        'sharesInfo' => '\Adobe\ESign\Model\ShareParticipantInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'participantSets' => null,
        'ccsInfo' => null,
        'nextParticipantSets' => null,
        'senderInfo' => null,
        'sharesInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'participantSets' => 'participantSets',
        'ccsInfo' => 'ccsInfo',
        'nextParticipantSets' => 'nextParticipantSets',
        'senderInfo' => 'senderInfo',
        'sharesInfo' => 'sharesInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'participantSets' => 'setParticipantSets',
        'ccsInfo' => 'setCcsInfo',
        'nextParticipantSets' => 'setNextParticipantSets',
        'senderInfo' => 'setSenderInfo',
        'sharesInfo' => 'setSharesInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'participantSets' => 'getParticipantSets',
        'ccsInfo' => 'getCcsInfo',
        'nextParticipantSets' => 'getNextParticipantSets',
        'senderInfo' => 'getSenderInfo',
        'sharesInfo' => 'getSharesInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['participantSets'] = isset($data['participantSets']) ? $data['participantSets'] : null;
        $this->container['ccsInfo'] = isset($data['ccsInfo']) ? $data['ccsInfo'] : null;
        $this->container['nextParticipantSets'] = isset($data['nextParticipantSets']) ? $data['nextParticipantSets'] : null;
        $this->container['senderInfo'] = isset($data['senderInfo']) ? $data['senderInfo'] : null;
        $this->container['sharesInfo'] = isset($data['sharesInfo']) ? $data['sharesInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets participantSets
     *
     * @return \Adobe\ESign\Model\DetailedParticipantSetInfo[]
     */
    public function getParticipantSets()
    {
        return $this->container['participantSets'];
    }

    /**
     * Sets participantSets
     *
     * @param \Adobe\ESign\Model\DetailedParticipantSetInfo[] $participantSets Information about the participant Sets.
     *
     * @return $this
     */
    public function setParticipantSets($participantSets)
    {
        $this->container['participantSets'] = $participantSets;

        return $this;
    }

    /**
     * Gets ccsInfo
     *
     * @return \Adobe\ESign\Model\CCParticipantInfo[]
     */
    public function getCcsInfo()
    {
        return $this->container['ccsInfo'];
    }

    /**
     * Sets ccsInfo
     *
     * @param \Adobe\ESign\Model\CCParticipantInfo[] $ccsInfo Information of CC participants of the agreement.
     *
     * @return $this
     */
    public function setCcsInfo($ccsInfo)
    {
        $this->container['ccsInfo'] = $ccsInfo;

        return $this;
    }

    /**
     * Gets nextParticipantSets
     *
     * @return \Adobe\ESign\Model\DetailedParticipantSetInfo[]
     */
    public function getNextParticipantSets()
    {
        return $this->container['nextParticipantSets'];
    }

    /**
     * Sets nextParticipantSets
     *
     * @param \Adobe\ESign\Model\DetailedParticipantSetInfo[] $nextParticipantSets Information of next participant sets.
     *
     * @return $this
     */
    public function setNextParticipantSets($nextParticipantSets)
    {
        $this->container['nextParticipantSets'] = $nextParticipantSets;

        return $this;
    }

    /**
     * Gets senderInfo
     *
     * @return \Adobe\ESign\Model\SenderInfo
     */
    public function getSenderInfo()
    {
        return $this->container['senderInfo'];
    }

    /**
     * Sets senderInfo
     *
     * @param \Adobe\ESign\Model\SenderInfo $senderInfo Information of the sender of the agreement.
     *
     * @return $this
     */
    public function setSenderInfo($senderInfo)
    {
        $this->container['senderInfo'] = $senderInfo;

        return $this;
    }

    /**
     * Gets sharesInfo
     *
     * @return \Adobe\ESign\Model\ShareParticipantInfo[]
     */
    public function getSharesInfo()
    {
        return $this->container['sharesInfo'];
    }

    /**
     * Sets sharesInfo
     *
     * @param \Adobe\ESign\Model\ShareParticipantInfo[] $sharesInfo Information of the participants with whom the agreement has been shared.
     *
     * @return $this
     */
    public function setSharesInfo($sharesInfo)
    {
        $this->container['sharesInfo'] = $sharesInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


