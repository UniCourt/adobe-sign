<?php
/**
 * ParticipantSecurityOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\ESign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Adobe\ESign\Model;

use \ArrayAccess;
use \Adobe\ESign\ObjectSerializer;

/**
 * ParticipantSecurityOption Class Doc Comment
 *
 * @category Class
 * @package  Adobe\ESign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ParticipantSecurityOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParticipantSecurityOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'password' => 'string',
        'authenticationMethod' => 'string',
        'phoneInfo' => '\Adobe\ESign\Model\PhoneInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'password' => null,
        'authenticationMethod' => null,
        'phoneInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'password' => 'password',
        'authenticationMethod' => 'authenticationMethod',
        'phoneInfo' => 'phoneInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'password' => 'setPassword',
        'authenticationMethod' => 'setAuthenticationMethod',
        'phoneInfo' => 'setPhoneInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'password' => 'getPassword',
        'authenticationMethod' => 'getAuthenticationMethod',
        'phoneInfo' => 'getPhoneInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHENTICATION_METHOD_NONE = 'NONE';
    const AUTHENTICATION_METHOD_PASSWORD = 'PASSWORD';
    const AUTHENTICATION_METHOD_PHONE = 'PHONE';
    const AUTHENTICATION_METHOD_KBA = 'KBA';
    const AUTHENTICATION_METHOD_WEB_IDENTITY = 'WEB_IDENTITY';
    const AUTHENTICATION_METHOD_ADOBE_SIGN = 'ADOBE_SIGN';
    const AUTHENTICATION_METHOD_GOV_ID = 'GOV_ID';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationMethodAllowableValues()
    {
        return [
            self::AUTHENTICATION_METHOD_NONE,
            self::AUTHENTICATION_METHOD_PASSWORD,
            self::AUTHENTICATION_METHOD_PHONE,
            self::AUTHENTICATION_METHOD_KBA,
            self::AUTHENTICATION_METHOD_WEB_IDENTITY,
            self::AUTHENTICATION_METHOD_ADOBE_SIGN,
            self::AUTHENTICATION_METHOD_GOV_ID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['authenticationMethod'] = isset($data['authenticationMethod']) ? $data['authenticationMethod'] : null;
        $this->container['phoneInfo'] = isset($data['phoneInfo']) ? $data['phoneInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationMethodAllowableValues();
        if (!is_null($this->container['authenticationMethod']) && !in_array($this->container['authenticationMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authenticationMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password The password required for the participant to view and sign the document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. The password will not be returned in GET call. In case of PUT call, password associated with Agreement resource will remain unchanged if no password is specified but authentication method is provided as PASSWORD
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets authenticationMethod
     *
     * @return string
     */
    public function getAuthenticationMethod()
    {
        return $this->container['authenticationMethod'];
    }

    /**
     * Sets authenticationMethod
     *
     * @param string $authenticationMethod The authentication method for the participants to have access to view and sign the document
     *
     * @return $this
     */
    public function setAuthenticationMethod($authenticationMethod)
    {
        $allowedValues = $this->getAuthenticationMethodAllowableValues();
        if (!is_null($authenticationMethod) && !in_array($authenticationMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authenticationMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authenticationMethod'] = $authenticationMethod;

        return $this;
    }

    /**
     * Gets phoneInfo
     *
     * @return \Adobe\ESign\Model\PhoneInfo
     */
    public function getPhoneInfo()
    {
        return $this->container['phoneInfo'];
    }

    /**
     * Sets phoneInfo
     *
     * @param \Adobe\ESign\Model\PhoneInfo $phoneInfo The phoneInfo required for the participant to view and sign the document
     *
     * @return $this
     */
    public function setPhoneInfo($phoneInfo)
    {
        $this->container['phoneInfo'] = $phoneInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


